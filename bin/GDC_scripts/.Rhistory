##########################################################################################################
#### Do DE (exact test)
#########
de <- exactTest(y, pair=c(lo, hi))
tt <- topTags(de, n=nrow(y))
dt <- decideTests(de,lfc=1)
tt_rank <- tt$table
tt_rank["Rank"] <- (sign(tt_rank$logFC)) * (-log(tt_rank$FDR,10))
tt_rank <- tt_rank[c("gene_name", "Rank")]
tt_rank <- tt_rank[order(tt_rank$Rank), ]
tt_rank$Rank[tt_rank$Rank == Inf] = 300
tt_rank$Rank[tt_rank$Rank == -Inf] = -300
# for each contrast make a deg_sigFC_table containing all the genes that are significantly up or downregulated
# for that particular comparison
sorted_table <- tt$table[order(tt$table[,2]),]
rn <- rownames(tt$table)
deg_sigFC <- rn[(tt$table$FDR <= .05) & ((tt$table[,2] <= -1) | (tt$table[,2] >= 1))]
deg_sigFC_table <- sorted_table[deg_sigFC, ]
### Do the volcano plots - html versions with Glimma
results_df <- tt$table
results_df <- results_df[rownames(de$genes),]
results_df$PValue[results_df$PValue == 0.000000e+00] <- 1.0e-322
results_df$FDR[results_df$FDR == 0.000000e+00] <- 1.0e-320
if((summary(dt)[1,1] == 0) & (summary(dt)[3,1] == 0)){
DE <- c("notDE")[as.factor(dt)]
col_list = c("black")
} else if ((summary(dt)[1,1] > 0) & (summary(dt)[3,1] > 0)){
DE <- c("downregulated", "notDE", "upregulated")[as.factor(dt)]
col_list = c("blue","black","red")
} else if ((summary(dt)[1,1] > 0) & (summary(dt)[3,1] == 0)){
DE <- c("downregulated", "notDE")[as.factor(dt)]
col_list = c("blue","black")
} else if ((summary(dt)[1,1] == 0) & (summary(dt)[3,1] > 0)){
DE <- c("notDE", "upregulated")[as.factor(dt)]
col_list = c("black","red")
}
anno <- as.data.frame(cbind(dt,de$genes,DE))
anno <- cbind(rownames(anno), anno)
colnames(anno)<-c("EntrezID","dt", "GeneName", "DE")
with(results_df, glXYPlot(logFC, -log10(PValue), counts = cpm(y$counts,log=TRUE), groups = group, samples=rownames(y$samples),
main="High_Vs_Low", xlab="log2FC", ylab = "neg.log10.pValue", pch=20, cex=0.25, side.main="GeneName", display.columns = c("EntrezID","GeneName","DE"),
status=dt,anno=anno, cols = col_list, html = "High_Vs_Low"))
library(calibrate)
### Do the volcano plots - svg versions
paste("High_Vs_Low", GOI,"volcano.svg",sep="_",collapse="")
### Do the volcano plots - svg versions
svg(paste("High_Vs_Low", GOI,"volcano.svg",sep="_",collapse=""))
with(results_df, plot(logFC, -log10(PValue), pch=20, cex=0.25, col="grey", main="Volcano plot"))
# Add colored points: red if FDR<0.05, orange of log2FC>1, green if both)
with(subset(results_df, FDR < 0.05), points(logFC, -log10(PValue), pch=20, cex=0.25, col="green"))
with(subset(results_df, abs(logFC) >1 ), points(logFC, -log10(PValue), pch=20, cex=0.25, col="orange"))
with(subset(results_df, FDR < 0.05 & abs(logFC)>1), points(logFC, -log10(PValue), pch=20, cex=0.5, col="green"))
with(subset(results_df, FDR < 0.05 & logFC > 1), points(logFC, -log10(PValue), pch=20, cex=0.5, col="red"))
with(subset(results_df, FDR < 0.05 & logFC < -1), points(logFC, -log10(PValue), pch=20, cex=0.5, col="blue"))
# Label points with the textxy function from the calibrate plot
with(subset(results_df, -log10(results_df$PValue)>200 & abs(logFC)>2), textxy(logFC, -log10(PValue), labs=gene_name, cex=.7,offset=0.5))
# Adding cut-off lines
FDR_sig_df <- subset(results_df, FDR < 0.05 & abs(logFC)>1)
write.csv(FDR_sig_df, file=paste("High_Vs_Low", GOI,"de_sigFC.csv",sep="_",collapse=""))
yaxis_cuttoff <- -log10(FDR_sig_df[which.max(FDR_sig_df[,"FDR"]),"PValue"])
segments(-6, yaxis_cuttoff, -1, yaxis_cuttoff, col="grey", lty=3)
segments(1, yaxis_cuttoff, 8, yaxis_cuttoff, col="grey", lty=3)
segments(-1, yaxis_cuttoff, -1, 20, col="grey", lty=3)
segments(1, yaxis_cuttoff, 1, 20, col="grey", lty=3)
# Adding counts for sig up and down
total_reg_count <- nrow(FDR_sig_df)
up_reg_count <- nrow(subset(FDR_sig_df, logFC > 1))
down_reg_count <- nrow(subset(FDR_sig_df, logFC < -1))
mtext_string <- paste("# Sig DE:", total_reg_count, " (Up:", up_reg_count, ", Down:", down_reg_count, ")")
mtext(mtext_string)
dev.off()
write.table(tt_rank, "top_tags_ranked.rnk", sep='\t', row.names=FALSE, quote=FALSE)
outdir <- '/data/home'
outdir2 <- path.expand(outdir, "DE")
path.expand()
outdir2 <- paste(outdir, "/DE", sep="")
outdir2
### Do plots
svg(paste(GOI, "FPKM_histogram.svg", sep="_"))
GOI <- "hsa-miR-200c-3p"
strat_by <- "miRNA"
percentile <- 2
gene_fpkm_filename <- list.files("../BRCA/mRNA_expression_fpkm", "GDC_TCGA-BRCA.*FPKM-mRNA_all.tsv", full.names=TRUE)
gene_counts_filename <- list.files("../BRCA/mRNA_expression_counts", "GDC_TCGA-BRCA.*Count-mRNA_all.tsv", full.names=TRUE)
isomir_rpm_filename <- list.files("../BRCA/isomiR_expression_rpm", "GDC_TCGA-BRCA.*RPM-miRNAisoform_all.tsv", full.names=TRUE)
normals <- ""
##########################################################################################################
#### Import libraries
#########
suppressMessages(library(edgeR))
suppressMessages(library(Glimma))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
##########################################################################################################
#### Setup stratification
#########
message(paste("beginning DE Analysis for", GOI))
if (strat_by == "mRNA"){
exp_data <- read.delim(gene_fpkm_filename, sep='\t', check.names=FALSE, stringsAsFactors=FALSE, row.names = "gene_name")
exp_type <- "FPKM"
} else if (strat_by == "miRNA"){
mRNA_ids <- t(read.table(gene_fpkm_filename, header = F, nrows = 1))
mRNA_ids <- mRNA_ids[-1]
exp_data <- read.delim(isomir_rpm_filename, sep='\t', check.names=FALSE, stringsAsFactors=FALSE, row.names = "miR_name")
exp_type <- "RPM"
} else {
stop("Can only stratify by mRNA or miRNA", call.=FALSE)
}
### get data for GOI only and stratify
GOI_exp_raw <- as.data.frame(t(exp_data[GOI, ]))
if (strat_by == "miRNA"){
GOI_exp_raw <- subset(GOI_exp_raw, rownames(GOI_exp_raw) %in% mRNA_ids)
}
GOI_exp <- GOI_exp_raw
# check and strip normals out if requested
if (normals == "") {
message(paste("excluding normal samples"))
GOI_exp$cancertype <- substr(rownames(GOI_exp), 14, 15)
GOI_exp <- GOI_exp[GOI_exp$cancertype != 11, ]
GOI_exp <- GOI_exp[GOI]
}
GOI_exp <- GOI_exp[order(GOI_exp[GOI]), , drop=FALSE]
GOI_exp_wstrat = mutate(GOI_exp, quantile_rank = ntile(GOI_exp[GOI],4))
GOI_exp_wstrat = mutate(GOI_exp_wstrat, percentile_rank = ntile(GOI_exp[GOI],100))
### write results to file
rownames(GOI_exp_wstrat) <- rownames(GOI_exp)
### now create matrix
# first_quart_df <- data.frame(matrix(ncol=3, nrow=dim(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 1, ])[1]))
first_quart_df <- data.frame(matrix(ncol=3, nrow=dim(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank <= percentile, ])[1]))
matrix_colnames <- c("Sample", "lo", "hi")
colnames(first_quart_df) <- matrix_colnames
# first_quart_df$Sample <- rownames(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 1, ])
first_quart_df$Sample <- rownames(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank <= percentile, ])
first_quart_df$lo <- 1
first_quart_df$hi <- 0
# third_quart_df <- data.frame(matrix(ncol=3, nrow=dim(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 4, ])[1]))
third_quart_df <- data.frame(matrix(ncol=3, nrow=dim(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank >= (100-percentile), ])[1]))
colnames(third_quart_df) <- matrix_colnames
# third_quart_df$Sample <- rownames(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 4, ])
third_quart_df$Sample <- rownames(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank >= (100-percentile), ])
third_quart_df$lo <- 0
third_quart_df$hi <- 1
design <- rbind(first_quart_df, third_quart_df)
rownames(design) <- design$Sample
design <- design[c("lo", "hi")]
### Do plots
svg(paste(GOI, "FPKM_histogram.svg", sep="_"))
hist(log2(GOI_exp[, GOI]), breaks=100, main=paste(GOI, "Expression Frequency Histogram"),
xlab=paste("Log2(", exp_type, ")", sep=""), ylab="frequency")
abline(v=mean(log2(GOI_exp[, GOI])), col="purple")
abline(v=median(log2(GOI_exp[, GOI])), col="green")
abline(v=max(log2(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank <= percentile, GOI])), col="blue")
abline(v=min(log2(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank >= (100-percentile), GOI])), col="red")
# abline(v=max(log2(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 1, GOI])), col="blue")
# abline(v=min(log2(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 4, GOI])), col="red")
dev.off()
### Do plots
svg(paste(GOI, "FPKM_histogram.svg", sep="_"))
hist(log2(GOI_exp[, GOI]), breaks=100, main=paste(GOI, "Expression Frequency Histogram"),
xlab=paste("Log2(", exp_type, ")", sep=""), ylab="frequency")
abline(v=mean(log2(GOI_exp[, GOI])), col="purple")
abline(v=median(log2(GOI_exp[, GOI])), col="green")
abline(v=max(log2(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank <= percentile, GOI])), col="blue")
abline(v=min(log2(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank >= (100-percentile), GOI])), col="red")
# abline(v=max(log2(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 1, GOI])), col="blue")
# abline(v=min(log2(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 4, GOI])), col="red")
suppressMessages(dev.off())
### Do plots
svg(paste(GOI, "FPKM_histogram.svg", sep="_"))
hist(log2(GOI_exp[, GOI]), breaks=100, main=paste(GOI, "Expression Frequency Histogram"),
xlab=paste("Log2(", exp_type, ")", sep=""), ylab="frequency")
abline(v=mean(log2(GOI_exp[, GOI])), col="purple")
abline(v=median(log2(GOI_exp[, GOI])), col="green")
abline(v=max(log2(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank <= percentile, GOI])), col="blue")
abline(v=min(log2(GOI_exp_wstrat[GOI_exp_wstrat$percentile_rank >= (100-percentile), GOI])), col="red")
# abline(v=max(log2(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 1, GOI])), col="blue")
# abline(v=min(log2(GOI_exp_wstrat[GOI_exp_wstrat$quantile_rank == 4, GOI])), col="red")
invisible(dev.off())
GOI_exp_raw$Normal <- grepl(pattern = "(-11A|-11B)$", rownames(GOI_exp_raw))
GOI_exp_raw$Normal <- as.factor(GOI_exp_raw$Normal)
GOI_exp_raw[, GOI] <- log2(GOI_exp_raw[, GOI])
svg(paste(GOI, "FPKM_N-T_boxplot.svg", sep="_"))
p <- ggplot(GOI_exp_raw, aes(x=Normal, y=get(GOI))) + geom_boxplot(notch=TRUE)
p + geom_jitter(shape=16, position=position_jitter(0.2)) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
invisible(dev.off())
GOI_exp_wstrat$quantile_rank <- as.factor(GOI_exp_wstrat$quantile_rank)
GOI_exp_wstrat[, GOI] <- log2(GOI_exp_wstrat[, GOI])
svg(paste(GOI, "FPKM_strat_boxplot.svg", sep="_"))
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"))
# p + geom_dotplot(binaxis='y', stackdir='center', dotsize=1, binwidth=0.1) + scale_x_discrete(limits=c("1", "4"))
invisible(dev.off())
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"))
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"), na.rm=TRUE)
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""), na.rm=TRUE)
p <- ggplot(GOI_exp_wstrat, na.rm=TRUE, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"))
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(na.rm=TRUE, shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"))
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(na.rm=TRUE, shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"), na.rm=TRUE)
p <- ggplot(GOI_exp_wstrat, na.rm=TRUE, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(na.rm=TRUE, shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"))
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_boxplot(notch=TRUE, na.rm=TRUE) + ylab(paste("Log2(", GOI, " ", exp_type, ")", sep=""))
p + geom_jitter(na.rm=TRUE, shape=16, position=position_jitter(0.2)) + scale_x_discrete(limits=c("1", "4"))
p <- ggplot(GOI_exp_wstrat, aes(x=quantile_rank, y=get(GOI))) + geom_violin(na.rm=TRUE) + ylab(paste("Log2(", GOI, " FPKM)", sep=""))
p + geom_dotplot(na.rm=TRUE, binaxis='y', stackdir='center', dotsize=0.5, binwidth=0.1) + scale_x_discrete(limits=c("1", "4"))
hi <- 'hi'
lo <- 'lo'
### Read in data
raw_data <- read.delim(gene_counts_filename, sep='\t', check.names=FALSE, stringsAsFactors=FALSE)
gene_counts <- raw_data[row.names(design)]
gene_counts[is.na(gene_counts)] <- 0
gene_names <- raw_data['gene_name']
### Setup groups
group <- vector()
for (row in 1:nrow(design)) {
row_condition <- NaN
for (condition in names(design)) {
if (design[row, condition] != 0) {
if (!is.na(row_condition)) {
stop(paste("row ", row, " contains more than 1 condition"));
} else {
row_condition <- condition;
}
}
}
group <- append(group, row_condition);
}
### Create DGEList object
y <- DGEList(counts=gene_counts, genes=gene_names, group=group)
#### CPM table
cpm_table <- y$counts
### Filtering and normalisation
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$gene_name)
y <- y[!d,]
## filter lowly expressed genes
smallest_replicates_group_size <- min(table(group))
keep <- rowSums(cpm(y$counts)>5) >= smallest_replicates_group_size
y <- y[keep, , keep.lib.sizes=FALSE]
## recompute library size
y$samples$lib.size <- colSums(y$counts)
## TMM normalisation
y <- calcNormFactors(y)
### Estimating the dispersion
y <- estimateDisp(y, design)
### Plot MDS, BCV and mean_var
glMDSPlot(y,labels=colnames(y$counts), groups=group,
main=paste(GOI,"MDS-Plot",sep="-",collapse=""),
html=paste(GOI,"MDS-Plot",sep="-",collapse=""), launch=FALSE)
png("multi_dimensional_scaling_plot.png")
plotMDS(y)
invisible(dev.off())
png("mean_var.png");
plotMeanVar(y, show.tagwise.vars = TRUE, NBline = TRUE)
invisible(dev.off())
png("bcv.png");
plotBCV(y)
invisible(dev.off())
### Normalized counts raw
norm_raw <- y$counts
o <- order(rownames(norm_raw))
norm_raw <- norm_raw[o,]
### Normalized counts
norm_cpm <- cpm(y, normalized.lib.sizes=TRUE)
o <- order(rownames(norm_cpm))
norm_cpm <- norm_cpm[o,]
### log2 Normalized counts
log_norm_cpm <- cpm(y, normalized.lib.sizes=TRUE, log=TRUE, prior.count=1)
o <- order(rownames(log_norm_cpm))
log_norm_cpm <- log_norm_cpm[o,]
##########################################################################################################
#### Do DE (exact test)
#########
de <- exactTest(y, pair=c(lo, hi))
tt <- topTags(de, n=nrow(y))
dt <- decideTests(de,lfc=1)
write.csv(tt, "top_tags.csv")
tt_rank <- tt$table
tt_rank["Rank"] <- (sign(tt_rank$logFC)) * (-log(tt_rank$FDR,10))
tt_rank <- tt_rank[c("gene_name", "Rank")]
tt_rank <- tt_rank[order(tt_rank$Rank), ]
tt_rank$Rank[tt_rank$Rank == Inf] = 300
tt_rank$Rank[tt_rank$Rank == -Inf] = -300
# for each contrast make a deg_sigFC_table containing all the genes that are significantly up or downregulated
# for that particular comparison
sorted_table <- tt$table[order(tt$table[,2]),]
rn <- rownames(tt$table)
deg_sigFC <- rn[(tt$table$FDR <= .05) & ((tt$table[,2] <= -1) | (tt$table[,2] >= 1))]
deg_sigFC_table <- sorted_table[deg_sigFC, ]
### Do the volcano plots - html versions with Glimma
results_df <- tt$table
results_df <- results_df[rownames(de$genes),]
results_df$PValue[results_df$PValue == 0.000000e+00] <- 1.0e-322
results_df$FDR[results_df$FDR == 0.000000e+00] <- 1.0e-320
if((summary(dt)[1,1] == 0) & (summary(dt)[3,1] == 0)){
DE <- c("notDE")[as.factor(dt)]
col_list = c("black")
} else if ((summary(dt)[1,1] > 0) & (summary(dt)[3,1] > 0)){
DE <- c("downregulated", "notDE", "upregulated")[as.factor(dt)]
col_list = c("blue","black","red")
} else if ((summary(dt)[1,1] > 0) & (summary(dt)[3,1] == 0)){
DE <- c("downregulated", "notDE")[as.factor(dt)]
col_list = c("blue","black")
} else if ((summary(dt)[1,1] == 0) & (summary(dt)[3,1] > 0)){
DE <- c("notDE", "upregulated")[as.factor(dt)]
col_list = c("black","red")
}
anno <- as.data.frame(cbind(dt,de$genes,DE))
anno <- cbind(rownames(anno), anno)
colnames(anno)<-c("EntrezID","dt", "GeneName", "DE")
with(results_df, glXYPlot(logFC, -log10(PValue), counts = cpm(y$counts,log=TRUE), groups = group, samples=rownames(y$samples),
main="High_Vs_Low", xlab="log2FC", ylab = "neg.log10.pValue", pch=20, cex=0.25, side.main="GeneName", display.columns = c("EntrezID","GeneName","DE"),
status=dt,anno=anno, cols = col_list, html = "High_Vs_Low"))
suppressMessages(library(calibrate))
### Do the volcano plots - svg versions
svg(paste("High_Vs_Low", GOI,"volcano.svg",sep="_",collapse=""))
with(results_df, plot(logFC, -log10(PValue), pch=20, cex=0.25, col="grey", main="Volcano plot"))
# Add colored points: red if FDR<0.05, orange of log2FC>1, green if both)
with(subset(results_df, FDR < 0.05), points(logFC, -log10(PValue), pch=20, cex=0.25, col="green"))
with(subset(results_df, abs(logFC) >1 ), points(logFC, -log10(PValue), pch=20, cex=0.25, col="orange"))
with(subset(results_df, FDR < 0.05 & abs(logFC)>1), points(logFC, -log10(PValue), pch=20, cex=0.5, col="green"))
with(subset(results_df, FDR < 0.05 & logFC > 1), points(logFC, -log10(PValue), pch=20, cex=0.5, col="red"))
with(subset(results_df, FDR < 0.05 & logFC < -1), points(logFC, -log10(PValue), pch=20, cex=0.5, col="blue"))
# Label points with the textxy function from the calibrate plot
with(subset(results_df, -log10(results_df$PValue)>200 & abs(logFC)>2), textxy(logFC, -log10(PValue), labs=gene_name, cex=.7,offset=0.5))
# Adding cut-off lines
FDR_sig_df <- subset(results_df, FDR < 0.05 & abs(logFC)>1)
write.csv(FDR_sig_df, file=paste("High_Vs_Low", GOI,"de_sigFC.csv",sep="_",collapse=""))
yaxis_cuttoff <- -log10(FDR_sig_df[which.max(FDR_sig_df[,"FDR"]),"PValue"])
segments(-6, yaxis_cuttoff, -1, yaxis_cuttoff, col="grey", lty=3)
segments(1, yaxis_cuttoff, 8, yaxis_cuttoff, col="grey", lty=3)
segments(-1, yaxis_cuttoff, -1, 20, col="grey", lty=3)
segments(1, yaxis_cuttoff, 1, 20, col="grey", lty=3)
# Adding counts for sig up and down
total_reg_count <- nrow(FDR_sig_df)
up_reg_count <- nrow(subset(FDR_sig_df, logFC > 1))
down_reg_count <- nrow(subset(FDR_sig_df, logFC < -1))
mtext_string <- paste("# Sig DE:", total_reg_count, " (Up:", up_reg_count, ", Down:", down_reg_count, ")")
mtext(mtext_string)
invisible(dev.off())
### Heatmap
suppressMessages(library(gplots))
suppressMessages(library(RColorBrewer))
logcounts_cpm <- cpm(y, normalized.lib.sizes = TRUE, log = TRUE)
logcounts_cpm_meansubtracted <- logcounts_cpm - rowMeans(logcounts_cpm)
d_table<-deg_sigFC_table
# Only keep columns relevant to the contrast being considered
cols<-c(1:ncol(logcounts_cpm))
DE_normalized_counts<-cbind(d_table,logcounts_cpm_meansubtracted[match(rownames(d_table),rownames(logcounts_cpm_meansubtracted)),cols])
DE_logcounts<-logcounts_cpm[match(rownames(d_table),rownames(logcounts_cpm)),cols]
DE_logcounts<-cbind(y$genes[rownames(d_table),],DE_logcounts)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# svg(filename=paste("High_Vs_Low", GOI, "heatmap.svg", sep="_"), width=10, height=10)
png(filename=paste("High_Vs_Low", GOI, "heatmap.png", sep="_"))
h<-heatmap.2(sapply(DE_normalized_counts[,(6:ncol(DE_normalized_counts))],as.numeric),
hclustfun = function(x) hclust(x, method="single"),
distfun=function(x) dist(x,method ='manhattan'),
col=rev(morecols(50)),
scale="row",trace="none" ,Colv = FALSE,margins=c(10,10),labRow = FALSE,
main = paste("High_Vs_Low ", GOI))
invisible(dev.off())
logcounts_cpm <- cpm(y, normalized.lib.sizes = TRUE, log = TRUE)
logcounts_cpm_meansubtracted <- logcounts_cpm - rowMeans(logcounts_cpm)
d_table<-deg_sigFC_table
# Only keep columns relevant to the contrast being considered
cols<-c(1:ncol(logcounts_cpm))
DE_normalized_counts<-cbind(d_table,logcounts_cpm_meansubtracted[match(rownames(d_table),rownames(logcounts_cpm_meansubtracted)),cols])
DE_logcounts<-logcounts_cpm[match(rownames(d_table),rownames(logcounts_cpm)),cols]
DE_logcounts<-cbind(y$genes[rownames(d_table),],DE_logcounts)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# svg(filename=paste("High_Vs_Low", GOI, "heatmap.svg", sep="_"), width=10, height=10)
png(filename=paste("High_Vs_Low", GOI, "heatmap.png", sep="_"))
h<-heatmap.2(sapply(DE_normalized_counts[,(6:ncol(DE_normalized_counts))],as.numeric),
hclustfun = function(x) hclust(x, method="single"),
distfun=function(x) dist(x,method ='manhattan'),
col=rev(morecols(50)),
scale="row",trace="none" ,Colv = FALSE,margins=c(10,10),labRow = FALSE,
main = paste("High_Vs_Low ", GOI))
suppressMessages(invisible(dev.off()))
# svg(filename=paste("High_Vs_Low", GOI, "heatmap.svg", sep="_"), width=10, height=10)
png(filename=paste("High_Vs_Low", GOI, "heatmap.png", sep="_"))
suppressMessages(h<-heatmap.2(sapply(DE_normalized_counts[,(6:ncol(DE_normalized_counts))],as.numeric),
hclustfun = function(x) hclust(x, method="single"),
distfun=function(x) dist(x,method ='manhattan'),
col=rev(morecols(50)),
scale="row",trace="none" ,Colv = FALSE,margins=c(10,10),labRow = FALSE,
main = paste("High_Vs_Low ", GOI)))
invisible(dev.off())
# svg(filename=paste("High_Vs_Low", GOI, "heatmap.svg", sep="_"), width=10, height=10)
png(filename=paste("High_Vs_Low", GOI, "heatmap.png", sep="_"))
h<-heatmap.2(sapply(DE_normalized_counts[,(6:ncol(DE_normalized_counts))],as.numeric),
hclustfun = function(x) hclust(x, method="single"),
distfun=function(x) dist(x,method ='manhattan'),
col=rev(morecols(50)), dendrogram="row",
scale="row",trace="none" ,Colv = FALSE,margins=c(10,10),labRow = FALSE,
main = paste("High_Vs_Low ", GOI))
invisible(dev.off())
gene_fpkm_filename <- "/home/jtoubia/Desktop/Projects/SRt/GDC/BRCA/mRNA_expression_fpkm/GDC_TCGA-BRCA-2021-03-03_FPKM-mRNA_toTPM_all.tsv"
system.time(exp_data <- read.delim(gene_fpkm_filename, sep='\t', check.names=FALSE, stringsAsFactors=FALSE, row.names = "gene_name"))
library(data.table)
system.time(exp_data <- fread(file=gene_fpkm_filename, sep='\t', header=TRUE, check.names=FALSE, stringsAsFactors=FALSE, index="gene_name"))
system.time(exp_data <- fread(file=gene_fpkm_filename, sep='\t', header=TRUE, check.names=FALSE, stringsAsFactors=FALSE, index="gene_name"))
gene_fpkm_filename <- "/home/jtoubia/Desktop/Projects/SRt/GDC/BRCA/mRNA_expression_fpkm/GDC_TCGA-BRCA-2021-03-03_FPKM-mRNA_toTPM_all.tsv"
system.time(exp_data <- fread(file=gene_fpkm_filename, sep='\t', header=TRUE, check.names=FALSE, stringsAsFactors=FALSE, index="gene_name"))
system.time(exp_data <- fread(file=gene_fpkm_filename, sep='\t', header=TRUE, check.names=FALSE, stringsAsFactors=FALSE, index="gene_name", data.table=FALSE))
typeof(exp_data)
system.time(exp_data <- fread(file=gene_fpkm_filename, sep='\t', header=TRUE, check.names=FALSE, stringsAsFactors=FALSE, index="gene_name"))
typeof(exp_data)
str(exp_data)
head(exp_data)
gene_fpkm_filename <- "/home/jtoubia/Desktop/Projects/SRt/GDC/BRCA/mRNA_expression_fpkm/GDC_TCGA-BRCA-2021-03-03_FPKM-mRNA_toTPM_all.tsv"
system.time(exp_data <- fread(file=gene_fpkm_filename, sep='\t', header=TRUE, check.names=FALSE, stringsAsFactors=FALSE, index="gene_name", data.table=FALSE))
library(data.table)
system.time(exp_data <- fread(file=gene_fpkm_filename, sep='\t', header=TRUE, check.names=FALSE, stringsAsFactors=FALSE, index="gene_name", data.table=FALSE))
str(exp_data)
if (!require("pacman")) install.packages("pacman")
if (!require("pacman")) install.packages("pacman")
suppressMessages(if (!require("pacman")) install.packages("pacman"))
p_load(edgeR)
p_load(Glimma)
p_load(dplyr)
p_load(tidyr)
p_load(data.table)
p_load(tibble)
p_load(ggplot2)
p_load(ggforce)
p_load(calibrate)
p_load(gplots)
p_load(RColorBrewer)
###*****************************************************************************
### Import libraries ####
###*****************************************************************************
suppressMessages(if (!require("pacman")) install.packages("pacman"))
p_load(edgeR, Glimma, dplyr, tidyr, data.table, tibble,
ggplot2, ggforce, calibrate, gplots, RColorBrewer)
read.csv("/home/jtoubia/Desktop/Projects/SRt/Analyses/tests_2024/DE_Tests/GDC/DE_Analysis_addative/GOI_exp_raw.tsv", sep = "\t")
temp <- read.csv("/home/jtoubia/Desktop/Projects/SRt/Analyses/tests_2024/DE_Tests/GDC/DE_Analysis_addative/GOI_exp_raw.tsv", sep = "\t")
temp
summary(temp)
exp_summary <- summary(temp)
exp_summary
str(exp_summary)
data.frame(unclass(exp_summary))
library(broom)
install.packages("broom")
library(broom)
exp_summary <- tidy(exp_summary)
table(temp)
p_load(edgeR, Glimma, dplyr, tidyr, data.table, tibble,
ggplot2, ggforce, calibrate, gplots, RColorBrewer)
temp %>% summarise(mean = mean("ZEB1"), n = n())
temp %>% summarise(mean = mean(ZEB1), n = n())
temp %>% summarise(mean = mean(FFAR1), n = n())
temp %>% summarise(mean = mean(ZEB1), median = median(ZEB1))
temp %>% summarise(mean = mean(ZEB1), median = median(ZEB1), IQR = IQR(ZEB1))
exp_summary
temp %>% summarise(mean = mean(ZEB1), median = median(ZEB1), IQR = IQR(ZEB1,1))
temp %>% summarise(mean = mean(FFAR1), median = median(FFAR1), IQR = IQR(FFAR1))
temp %>% summarise(mean = mean(FFAR1), median = median(FFAR1), max = max(FFAR1))
GOI <- "ZEB1+FFAR1"
### check GOI, split if necessary and set flags
if (grepl( "+", GOI, fixed = TRUE)){
GOI_label <- gsub("[+]", "-", GOI)
### check that there is no more than 5 GsOI
GsOI_split <- unlist(strsplit(GOI, "+", fixed=TRUE))
if (length(GsOI_split) > 5) {
stop("Can only have upto 5 genes in this type of analysis", call=FALSE)
}
message(paste("Stratification based on the addition of multiple genes of interest:",
paste(GOI, collapse="+")))
### set flag for multiple GOIs
strat_do_multi_GOI_analysis <- TRUE
} else if (grepl( "%", GOI, fixed = TRUE)){
GOI_label <- gsub("%", "-", GOI)
### check that there is exactly 2 GsOI
GsOI_split <- unlist(strsplit(GOI, "%", fixed=TRUE))
if (length(GsOI_split) != 2) {
stop("Must have 2 and 2 only genes in this type of analysis", call=FALSE)
}
message(paste("Stratification based on a ratio from 2 genes of interest:",
paste(GOI, collapse="%")))
### set flag for ratio GOIs
strat_do_ratio_GOI_analysis <- TRUE
} else {
### must be a single gene strat analysis
message(paste("Stratification based on a single gene of interest:", GOI))
GOI_label <- GOI
GsOI_split <- GOI
strat_do_single_GOI_analysis <- TRUE
}
GOI
GOI_label
GsOI_split
temp %>% summarise(mean = mean(), median = median(), max = max())
temp %>% summarise(mean = mean(temp), median = median(temp), max = max(temp))
temp %>% summarise_at(GsOI_split, mean)
temp %>% summarise_at(GsOI_split, median, max())
temp %>% summarise_at(GsOI_split, median, max
)
temp %>% summarise_at(GsOI_split, mean)
temp %>% summarise_at(GsOI_split, list(mean = mean, max = max))
temp %>% summarise_at(GsOI_split, mean)
mean_samples <- temp %>% summarise_at(GsOI_split, mean)
mean_samples
min(mean_samples)
